package net.maxdev.ftc.utils;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import java.text.DecimalFormat;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
//import Ana.AppData.Local.Android.Sdk.sources.android-23.java.lang.Math.java
import java.lang.Math;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;

public class drive_motors {
    DcMotor drive_motor_right = null;
    DcMotor drive_motor_left = null;
    private HardwareMap hardwareMap = null;
    private Telemetry telemetry = null;
    private static DecimalFormat df2 = new DecimalFormat(".##");
    public static boolean Half_Power,Three_Quarters;


    private static final double DRIVE_GEAR_REDUCTION = 1; //???????trebuie sa intrebam mecanica care e valoarea raportului
    private static final double COUNTS_PER_INCH = (560  * DRIVE_GEAR_REDUCTION) / (4 * Math.PI); //ce tipuri de motoare avem? //cate tickuri face motorul pt un i ch
    private static final int DRIVE_THRESHOLD = (int) (0.2 * COUNTS_PER_INCH); //in metri
    public double P_DRIVE_COEFF = 0.02; // values for easier Autonomous control


    public void init(Telemetry oldTelemetry, HardwareMap oldHardwareMap) {
        telemetry = oldTelemetry;
        hardwareMap = oldHardwareMap;

        drive_motor_right = hardwareMap.get(DcMotor.class, "right_wheel");
        drive_motor_left = hardwareMap.get(DcMotor.class, "left_wheel");

        drive_motor_right.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        drive_motor_left.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        drive_motor_right.setDirection(DcMotorSimple.Direction.FORWARD);
        drive_motor_left.setDirection(DcMotorSimple.Direction.REVERSE);

        drive_motor_right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        drive_motor_left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        drive_motor_right.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        drive_motor_left.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        Half_Power= false;
        Three_Quarters= false;
    }
    public void drive (double lw, double rw) {
        if (Half_Power==true) {
            lw=lw/2;
            rw=rw/2;
        }
        if (Three_Quarters){
            lw=lw*3/4;
            rw=rw*3/4;
        }
        drive_motor_left.setPower(-lw);
        drive_motor_right.setPower(-rw);
    }


    public void encoderinit(HardwareMap hardwareMap, Telemetry oldTelemetry) {
        telemetry = oldTelemetry; // initialization of telemetry

        drive_motor_right = hardwareMap.get(DcMotor.class, "right_wheel");
        drive_motor_left = hardwareMap.get(DcMotor.class, "left_wheel");

        drive_motor_right.setDirection(DcMotorSimple.Direction.FORWARD); //
        drive_motor_left.setDirection(DcMotorSimple.Direction.REVERSE); //

        drive_motor_right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER); //
        drive_motor_left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER); //

        drive_motor_right.setMode(DcMotor.RunMode.RUN_USING_ENCODER); // bypass Rev Expansion Bug that makes the
        drive_motor_left.setMode(DcMotor.RunMode.RUN_USING_ENCODER); // encoders go haywire if they are reset

        drive_motor_right.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); //
        drive_motor_left.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); // if the power of the motors is
    }

    public void encoderDrive(LinearOpMode LinearOpMode,double meters,double minSpeed, double maxSpeed,double margin) {///trebuie sa testam care e max speed
        double target; // tre sa vad ce fac cu parametrul cu linearOP
        double speed;
        double error;

        target = (int) (meters* DRIVE_THRESHOLD) + drive_motor_left.getCurrentPosition();// initialization of target values

        while ((LinearOpMode.opModeIsActive() && ((Math.abs(drive_motor_right.getCurrentPosition() - target) >= margin ) //ar trebui sa fac cu linear?
                || (Math.abs(drive_motor_left.getCurrentPosition() - target) >= margin)))
        {
            error= target - drive_motor_right.getCurrentPosition();
            speed=Range.clip( error * P_DRIVE_COEFF, minSpeed, maxSpeed);

            //
            drive_motor_left.setPower(speed);
            drive_motor_right.setPower(speed);

        }
        drive_motor_left.setPower(0);
        drive_motor_right.setPower(0); // this fully stops the motors when we reach the desired positions / distance

        telemetry.addLine()
                .addData("Left Motor PWR", df2.format(drive_motor_left.getPower()))
                .addData("Left Motor CurrRos", drive_motor_left.getCurrentPosition());
    }




    ///gyro

    private BNO055IMU gyro = null; //
    private double headingResetValue; // declaration of Rev Exp Hub gyro and reset value of front degrees
    private double savedTurning = 0;

    BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
    parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;
    parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
    parameters.calibrationDataFile = "BNO055IMUCalibration.json";
    parameters.loggingEnabled      = false;
    parameters.loggingTag          = "IMU";
    parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

    gyro = HardwareMap.get(BNO055IMU.class, "imu");
    gyro.initialize(parameters);

 private int correctcount; ///e ca sa imi dau seama daca gyroscopul a ajuns la headingul dorit sau nu


    private double getAbsoluteHeading() {
        return gyro.getAngularOrientation(AxesReference.INTRINSIC , AxesOrder.ZYX, AngleUnit.DEGREES).firstAngle;
    }
    private double getRelativeHeading() {
        return drive_motors.getAbsoluteHeading() - headingResetValue;
    }





    public void rotate(double gyroTarget,double gyroActual,double minSpeed) {

        if(((gyroTarget>0)&&(gyroActual>0)&&(gyroTarget> gyroActual))||((gyroTarget<0)&&(gyroActual<0)&&(gyroTarget< gyroActual)))
        {

            while(Math.abs(gyroTarget)> Math.abs(gyroActual)-10) { //am pus -10 ca sa nu intre in loop infinit

                drive_motors.turn(0.5);
                gyroActual=drive_motors.getRelativeHeading();
                telemetry.addLine()
                        .addData("gyroActual", df2.format(drive_motors.getRelativeHeading()));
            }
        }
        else {

            if (((gyroTarget > 0) && (gyroActual > 0) && (gyroTarget < gyroActual)) ||
                    ((gyroTarget < 0) && (gyroActual < 0) && (gyroTarget > gyroActual)))
            {
                while(Math.abs(gyroTarget)< Math.abs(gyroActual)-10) {

                    drive_motors.turn(0.5);
                    gyroActual=drive_motors.getRelativeHeading();

                    telemetry.addLine()
                            .addData("gyroActual", df2.format(drive_motors.getRelativeHeading()));
                }
            }
        }


        drive_motors.gyroCorrect(gyroTarget,5, gyroActual, 0.05, 0.2);
        telemetry.addLine()
                .addData("gyroActual", df2.format(drive_motors.getRelativeHeading()));

        drive_motor_left.setPower(0);
        drive_motor_right.setPower(0);

    }



    public int gyroCorrect(double gyroTarget, double gyroRange, double gyroActual, double minSpeed, double addSpeed) {
        double delta = (gyroTarget - gyroActual + 360.0) % 360.0; //the difference between target and actual mod 360
        if (delta > 180.0) delta -= 360.0; //makes delta between -180 and 180
        if (Math.abs(delta) > gyroRange) { //checks if delta is out of range
           correctcount = 0; //daca nu a ajunsa unghiul dorit,fct va returna 0
            double gyroMod = delta / 45.0; //scale from -1 to 1 if delta is less than 45 degrees
            if (Math.abs(gyroMod) > 1.0) gyroMod = Math.signum(gyroMod); //set gyromod to 1 or -1 if the error is more than 45 degrees
            this.turn(minSpeed * Math.signum(gyroMod) + addSpeed * gyroMod);
        }
        else {
            correctcount = 1; //++ ////daca nu a ajunsa unghiul dorit,fct va returna 1
            drive_motors.turn(0.0);
        }
        return correctcount ;
    }



    public void turn(double Power) {
        drive_motor_left.setPower(Power);
        drive_motor_right.setPower(Power);

    }


}








/////debug util pt TeleOP

    public void debug() {
        telemetry.addLine()
                .addData("Left Motor PWR", df2.format(drive_motor_left.getPower()))
                .addData("Left Motor CurrRos", drive_motor_left.getCurrentPosition());
        telemetry.addLine()
                .addData("Right Motor PWR", df2.format(drive_motor_right.getPower()))
                .addData("Right Motor CurrPos", drive_motor_right.getCurrentPosition());
        telemetry.addLine()
                .addData("Half Power", Half_Power);
        telemetry.addLine()
                .addData("Three Quarters", Three_Quarters);
        telemetry.addLine();
    }
}
